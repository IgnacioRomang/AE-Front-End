{"ast":null,"code":"var _jsxFileName = \"/home/desa04/AE-Front-End/src/fragments/calendar/Calendar.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { Button, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Paper, Typography, Popper } from \"@mui/material\";\nimport { getHSL } from \"../../utiles\";\nimport { Handshake } from \"@mui/icons-material\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  intStart,\n  intEnd,\n  msg\n}) => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(intStart);\n  const daysInMonth = getDaysInMonth(currentDate);\n  const monthName = new Intl.DateTimeFormat(\"es\", {\n    month: \"long\"\n  }).format(currentDate);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const handleClick = event => {\n    setAnchorEl(anchorEl ? null : event.currentTarget);\n  };\n  const open = Boolean(anchorEl);\n  const getTableCel = (day, index) => {\n    let {\n      h,\n      s,\n      l\n    } = {\n      h: 228,\n      s: 0,\n      l: 100\n    };\n    let color = getHSL(228, 0, 100);\n    if (intStart === intEnd) {\n      if (day != null && day === intEnd.getDate()) {\n        h = 204;\n        s = 70;\n        l = 63;\n      }\n      // estoy en marcado de un dia\n    } else {\n      //tengo que colorar rango\n      if (day != null && day <= intEnd.getDate()) {\n        h = 6;\n        s = 39;\n        l = 81;\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(TableCell, {\n      onMouseOver: open,\n      sx: {\n        border: \"1px solid #ddd\",\n        textAlign: \"center\",\n        padding: \"2px\",\n        backgroundColor: getHSL(h, s, l),\n        \"&:hover\": {\n          backgroundColor: getHSL(h, s, l - 10)\n        }\n      },\n      children: [day || \" \", /*#__PURE__*/_jsxDEV(Popper, {\n        id: index,\n        open: open,\n        anchorEl: anchorEl,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            border: 1,\n            p: 1,\n            bgcolor: \"background.paper\"\n          },\n          children: \"The content of the Popper.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, index, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"h7\",\n      paddingBottom: 2,\n      children: monthName.charAt(0).toUpperCase() + monthName.slice(1) + \" \" + currentDate.getFullYear()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      sx: {\n        maxWidth: \"300px\",\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [\"Dom\", \"Lun\", \"Mar\", \"Mié\", \"Jue\", \"Vie\", \"Sáb\"].map((day, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n              sx: {\n                backgroundColor: \"#f2f2f2\",\n                textAlign: \"center\",\n                padding: \"2px\"\n              },\n              children: day\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 92,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: chunkArray(daysInMonth, 7).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: row.map((day, index) => getTableCel(day, index))\n          }, rowIndex, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n};\n_s(Calendar, \"w40BWDktqOgIsKS+/ZFEEqTHN7Y=\");\n_c = Calendar;\nconst getDaysInMonth = date => {\n  const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n  const startingDayOfWeek = firstDay.getDay(); // 0 (Sunday) to 6 (Saturday)\n  const daysInMonth = [];\n\n  // Add empty cells for days before the first day of the month\n  for (let i = 0; i < startingDayOfWeek; i++) {\n    daysInMonth.push(null);\n  }\n  const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n  // Add the days of the month\n  for (let i = 1; i <= lastDay.getDate(); i++) {\n    daysInMonth.push(i);\n  }\n  return daysInMonth;\n};\nconst chunkArray = (arr, size) => {\n  const chunkedArray = [];\n  for (let i = 0; i < arr.length; i += size) {\n    chunkedArray.push(arr.slice(i, i + size));\n  }\n  return chunkedArray;\n};\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["React","useState","Button","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Paper","Typography","Popper","getHSL","Handshake","jsxDEV","_jsxDEV","Calendar","intStart","intEnd","msg","_s","currentDate","setCurrentDate","daysInMonth","getDaysInMonth","monthName","Intl","DateTimeFormat","month","format","anchorEl","setAnchorEl","handleClick","event","currentTarget","open","Boolean","getTableCel","day","index","h","s","l","color","getDate","onMouseOver","sx","border","textAlign","padding","backgroundColor","children","id","Box","p","bgcolor","fileName","_jsxFileName","lineNumber","columnNumber","variant","paddingBottom","charAt","toUpperCase","slice","getFullYear","component","maxWidth","margin","map","chunkArray","row","rowIndex","_c","date","firstDay","Date","getMonth","startingDayOfWeek","getDay","i","push","lastDay","arr","size","chunkedArray","length","$RefreshReg$"],"sources":["/home/desa04/AE-Front-End/src/fragments/calendar/Calendar.jsx"],"sourcesContent":["import React, { useState } from \"react\";\nimport {\n  Button,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Paper,\n  Typography,Popper,\n  \n} from \"@mui/material\";\nimport { getHSL } from \"../../utiles\";\nimport { Handshake } from \"@mui/icons-material\";\n\nconst Calendar = ({ intStart, intEnd, msg }) => {\n  const [currentDate, setCurrentDate] = useState(intStart);\n\n  const daysInMonth = getDaysInMonth(currentDate);\n\n  const monthName = new Intl.DateTimeFormat(\"es\", { month: \"long\" }).format(\n    currentDate\n  );\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  const handleClick = (event) => {\n    setAnchorEl(anchorEl ? null : event.currentTarget);\n  };\n  const open = Boolean(anchorEl);\n  const getTableCel = (day, index) => {\n    let { h, s, l } = { h: 228, s: 0, l: 100 };\n    let color = getHSL(228, 0, 100);\n    if (intStart === intEnd) {\n      if (day != null && day === intEnd.getDate()) {\n        h = 204;\n        s = 70;\n        l = 63;\n      }\n      // estoy en marcado de un dia\n    } else {\n      //tengo que colorar rango\n      if (day != null && day <= intEnd.getDate()) {\n        h = 6;\n        s = 39;\n        l = 81;\n      }\n    }\n\n    return (\n      <TableCell\n        onMouseOver={open}\n        key={index}\n        sx={{\n          border: \"1px solid #ddd\",\n          textAlign: \"center\",\n          padding: \"2px\",\n          backgroundColor: getHSL(h, s, l),\n          \"&:hover\": {\n            backgroundColor: getHSL(h, s, l - 10),\n          },\n        }}\n      >\n        {day || \" \"}\n        <Popper id={index} open={open} anchorEl={anchorEl}>\n          <Box sx={{ border: 1, p: 1, bgcolor: \"background.paper\" }}>\n            The content of the Popper.\n          </Box>\n        </Popper>\n      </TableCell>\n    );\n  };\n\n  return (\n    <div>\n      <Typography variant=\"h7\" paddingBottom={2}>\n        {monthName.charAt(0).toUpperCase() +\n          monthName.slice(1) +\n          \" \" +\n          currentDate.getFullYear()}\n      </Typography>\n      <TableContainer\n        component={Paper}\n        sx={{ maxWidth: \"300px\", margin: \"auto\" }}\n      >\n        <Table>\n          <TableHead>\n            <TableRow>\n              {[\"Dom\", \"Lun\", \"Mar\", \"Mié\", \"Jue\", \"Vie\", \"Sáb\"].map(\n                (day, index) => (\n                  <TableCell\n                    key={index}\n                    sx={{\n                      backgroundColor: \"#f2f2f2\",\n                      textAlign: \"center\",\n                      padding: \"2px\",\n                    }}\n                  >\n                    {day}\n                  </TableCell>\n                )\n              )}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {chunkArray(daysInMonth, 7).map((row, rowIndex) => (\n              <TableRow key={rowIndex}>\n                {row.map((day, index) => getTableCel(day, index))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\nconst getDaysInMonth = (date) => {\n  const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n  const startingDayOfWeek = firstDay.getDay(); // 0 (Sunday) to 6 (Saturday)\n  const daysInMonth = [];\n\n  // Add empty cells for days before the first day of the month\n  for (let i = 0; i < startingDayOfWeek; i++) {\n    daysInMonth.push(null);\n  }\n\n  const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n  // Add the days of the month\n  for (let i = 1; i <= lastDay.getDate(); i++) {\n    daysInMonth.push(i);\n  }\n\n  return daysInMonth;\n};\n\nconst chunkArray = (arr, size) => {\n  const chunkedArray = [];\n  for (let i = 0; i < arr.length; i += size) {\n    chunkedArray.push(arr.slice(i, i + size));\n  }\n  return chunkedArray;\n};\n\nexport default Calendar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}