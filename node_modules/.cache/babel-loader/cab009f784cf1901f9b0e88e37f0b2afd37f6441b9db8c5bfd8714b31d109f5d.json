{"ast":null,"code":"var _jsxFileName = \"/home/ignacioromang/Projects/AE-Front-End/src/fragments/calendar/Calendar.jsx\",\n  _s = $RefreshSig$();\nimport { Box, Paper, Popper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, Typography } from \"@mui/material\";\nimport { blue, grey, red } from \"@mui/material/colors\";\nimport React, { useState } from \"react\";\n\n/**\n * The `Calendar` component is a React component that displays a calendar table. It takes three props\n * as input: `intStart`, `intEnd`, and `msg`.\n *\n * @param {Date} intStart - The start date of the calendar range\n * @param {Date} intEnd - The end date of the calendar range\n * @param {string} msg - The message to display when the user hovers over a date in the calendar\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst Calendar = ({\n  intStart,\n  intEnd,\n  msg\n}) => {\n  _s();\n  const [currentDate, setCurrentDate] = useState(intStart);\n  const hash = btoa(currentDate.toString() + intEnd.toString());\n  const daysInMonth = getDaysInMonth(currentDate);\n  const monthName = new Intl.DateTimeFormat(\"es\", {\n    month: \"long\"\n  }).format(currentDate);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n  const handleOver = event => {\n    setOpen(!open);\n    setAnchorEl(anchorEl ? null : event.currentTarget);\n  };\n\n  /**\n   * Returns a table cell for a given date.\n   *\n   * @param {Date} day - The date to display in the table cell\n   * @param {number} rowIndex - The index of the row containing the table cell\n   * @param {number} cellIndex - The index of the table cell within the row\n   * @returns {React.ReactElement} A table cell containing the given date\n   */\n  const getTableCel = (day, rowIndex, cellIndex) => {\n    let msg_active = false;\n    let sizes = false;\n    let range_start = false;\n    let range_end = false;\n    let color = grey[50];\n    if (intStart === intEnd) {\n      if (day != null && day === intEnd.getDate()) {\n        color = blue[200];\n        sizes = true;\n        msg_active = true;\n      }\n    } else {\n      const isExclusionOfFirstCal = intStart.getMonth() < intEnd.getMonth();\n      range_start = intStart.getDate() === day && isExclusionOfFirstCal;\n      range_end = intEnd.getDate() === day && !isExclusionOfFirstCal;\n      if (isExclusionOfFirstCal ? day != null && day >= intStart.getDate() : day == null || day <= intEnd.getDate()) {\n        color = red[200];\n        msg_active = true;\n      }\n    }\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(TableCell, {\n        onMouseEnter: msg_active ? handleOver : null,\n        onMouseLeave: msg_active ? handleOver : null,\n        sx: {\n          //border: \"1px solid #ddd\",\n\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          textAlign: \"center\",\n          padding: \"2px\",\n          borderTopLeftRadius: sizes || range_start ? \"30px\" : \"0px\",\n          borderBottomLeftRadius: sizes || range_start ? \"30px\" : \"0px\",\n          borderTopRightRadius: sizes || range_end ? \"30px\" : \"0px\",\n          borderBottomRightRadius: sizes || range_end ? \"30px\" : \"0px\",\n          overflow: \"hidden\",\n          backgroundColor: color,\n          \"&:hover\": {\n            backgroundColor: color\n          }\n        },\n        children: day || \" \"\n      }, `${hash}-${rowIndex}-${cellIndex}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), msg_active && /*#__PURE__*/_jsxDEV(Popper, {\n        id: `${hash}-${rowIndex}`,\n        open: open,\n        anchorEl: anchorEl,\n        children: /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            border: 1,\n            p: 1,\n            bgcolor: \"background.paper\"\n          },\n          children: msg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 104,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Typography, {\n      variant: \"body7\",\n      padding: 2,\n      children: monthName.charAt(0).toUpperCase() + monthName.slice(1) + \" \" + currentDate.getFullYear()\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TableContainer, {\n      component: Paper,\n      sx: {\n        maxWidth: \"300px\",\n        margin: \"auto\"\n      },\n      children: /*#__PURE__*/_jsxDEV(Table, {\n        children: [/*#__PURE__*/_jsxDEV(TableHead, {\n          children: /*#__PURE__*/_jsxDEV(TableRow, {\n            children: [\"Dom\", \"Lun\", \"Mar\", \"Mié\", \"Jue\", \"Vie\", \"Sáb\"].map((day, index) => /*#__PURE__*/_jsxDEV(TableCell, {\n              sx: {\n                backgroundColor: \"#f2f2f2\",\n                textAlign: \"center\",\n                padding: \"2px\"\n              },\n              children: day\n            }, day + hash, false, {\n              fileName: _jsxFileName,\n              lineNumber: 136,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 133,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TableBody, {\n          children: chunkArray(daysInMonth, 7).map((row, rowIndex) => /*#__PURE__*/_jsxDEV(TableRow, {\n            children: row.map((day, index) => getTableCel(day, rowIndex, index))\n          }, `${hash}-${rowIndex}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 152,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 120,\n    columnNumber: 5\n  }, this);\n};\n\n/**\n * Returns an array containing the days of the month, including any empty cells for days before the first day of the month.\n *\n * @param {Date} date - The date for which to retrieve the days of the month\n * @returns {number[]} An array containing the days of the month, starting with the first day of the month and including any empty cells for days before the first day of the month\n */\n_s(Calendar, \"VlPyckaEpEXnnCtKGe0vMcdWdPc=\");\n_c = Calendar;\nconst getDaysInMonth = date => {\n  const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n  const startingDayOfWeek = firstDay.getDay(); // 0 (Sunday) to 6 (Saturday)\n  const daysInMonth = [];\n\n  // Add empty cells for days before the first day of the month\n  for (let i = 0; i < startingDayOfWeek; i++) {\n    daysInMonth.push(null);\n  }\n  const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n  // Add the days of the month\n  for (let i = 1; i <= lastDay.getDate(); i++) {\n    daysInMonth.push(i);\n  }\n  return daysInMonth;\n};\n\n/**\n * The `chunkArray` function takes an array and a size as input and returns a new array with the\n * original array split into smaller arrays of the specified size.\n *\n * @param {Array} arr - The array to be split into smaller arrays\n * @param {number} size - The maximum length of each subarray\n * @returns {Array} The function `chunkArray` returns a new array that contains subarrays of the original array\n * `arr`, where each subarray has a maximum length of `size`.\n */\nconst chunkArray = (arr, size) => {\n  const chunkedArray = [];\n  for (let i = 0; i < arr.length; i += size) {\n    chunkedArray.push(arr.slice(i, i + size));\n  }\n  return chunkedArray;\n};\nexport default Calendar;\nvar _c;\n$RefreshReg$(_c, \"Calendar\");","map":{"version":3,"names":["Box","Paper","Popper","Table","TableBody","TableCell","TableContainer","TableHead","TableRow","Typography","blue","grey","red","React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","Calendar","intStart","intEnd","msg","_s","currentDate","setCurrentDate","hash","btoa","toString","daysInMonth","getDaysInMonth","monthName","Intl","DateTimeFormat","month","format","anchorEl","setAnchorEl","open","setOpen","handleOver","event","currentTarget","getTableCel","day","rowIndex","cellIndex","msg_active","sizes","range_start","range_end","color","getDate","isExclusionOfFirstCal","getMonth","children","onMouseEnter","onMouseLeave","sx","alignItems","justifyContent","textAlign","padding","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","overflow","backgroundColor","fileName","_jsxFileName","lineNumber","columnNumber","id","border","p","bgcolor","variant","charAt","toUpperCase","slice","getFullYear","component","maxWidth","margin","map","index","chunkArray","row","_c","date","firstDay","Date","startingDayOfWeek","getDay","i","push","lastDay","arr","size","chunkedArray","length","$RefreshReg$"],"sources":["/home/ignacioromang/Projects/AE-Front-End/src/fragments/calendar/Calendar.jsx"],"sourcesContent":["import {\n  Box,\n  Paper,\n  Popper,\n  Table,\n  TableBody,\n  TableCell,\n  TableContainer,\n  TableHead,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport { blue, grey, red } from \"@mui/material/colors\";\nimport React, { useState } from \"react\";\n\n/**\n * The `Calendar` component is a React component that displays a calendar table. It takes three props\n * as input: `intStart`, `intEnd`, and `msg`.\n *\n * @param {Date} intStart - The start date of the calendar range\n * @param {Date} intEnd - The end date of the calendar range\n * @param {string} msg - The message to display when the user hovers over a date in the calendar\n */\nconst Calendar = ({ intStart, intEnd, msg }) => {\n  const [currentDate, setCurrentDate] = useState(intStart);\n  const hash = btoa(currentDate.toString() + intEnd.toString());\n  const daysInMonth = getDaysInMonth(currentDate);\n\n  const monthName = new Intl.DateTimeFormat(\"es\", { month: \"long\" }).format(\n    currentDate\n  );\n\n  const [anchorEl, setAnchorEl] = React.useState(null);\n  const [open, setOpen] = React.useState(false);\n\n  const handleOver = (event) => {\n    setOpen(!open);\n    setAnchorEl(anchorEl ? null : event.currentTarget);\n  };\n\n  /**\n   * Returns a table cell for a given date.\n   *\n   * @param {Date} day - The date to display in the table cell\n   * @param {number} rowIndex - The index of the row containing the table cell\n   * @param {number} cellIndex - The index of the table cell within the row\n   * @returns {React.ReactElement} A table cell containing the given date\n   */\n  const getTableCel = (day, rowIndex, cellIndex) => {\n    let msg_active = false;\n    let sizes = false;\n    let range_start = false;\n    let range_end = false;\n    let color = grey[50];\n\n    if (intStart === intEnd) {\n      if (day != null && day === intEnd.getDate()) {\n        color = blue[200];\n        sizes = true;\n        msg_active = true;\n      }\n    } else {\n      const isExclusionOfFirstCal = intStart.getMonth() < intEnd.getMonth();\n      range_start = intStart.getDate() === day && isExclusionOfFirstCal;\n      range_end = intEnd.getDate() === day && !isExclusionOfFirstCal;\n      if (\n        isExclusionOfFirstCal\n          ? day != null && day >= intStart.getDate()\n          : day == null || day <= intEnd.getDate()\n      ) {\n        color = red[200];\n        msg_active = true;\n      }\n    }\n\n    return (\n      <>\n        <TableCell\n          onMouseEnter={msg_active ? handleOver : null}\n          onMouseLeave={msg_active ? handleOver : null}\n          key={`${hash}-${rowIndex}-${cellIndex}`}\n          sx={{\n            //border: \"1px solid #ddd\",\n\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            textAlign: \"center\",\n            padding: \"2px\",\n            borderTopLeftRadius: sizes || range_start ? \"30px\" : \"0px\",\n            borderBottomLeftRadius: sizes || range_start ? \"30px\" : \"0px\",\n            borderTopRightRadius: sizes || range_end ? \"30px\" : \"0px\",\n            borderBottomRightRadius: sizes || range_end ? \"30px\" : \"0px\",\n            overflow: \"hidden\",\n            backgroundColor: color,\n            \"&:hover\": {\n              backgroundColor: color,\n            },\n          }}\n        >\n          {day || \" \"}\n        </TableCell>\n        {msg_active && (\n          <Popper id={`${hash}-${rowIndex}`} open={open} anchorEl={anchorEl}>\n            <Box\n              sx={{\n                border: 1,\n                p: 1,\n                bgcolor: \"background.paper\",\n              }}\n            >\n              {msg}\n            </Box>\n          </Popper>\n        )}\n      </>\n    );\n  };\n\n  return (\n    <div>\n      <Typography variant=\"body7\" padding={2}>\n        {monthName.charAt(0).toUpperCase() +\n          monthName.slice(1) +\n          \" \" +\n          currentDate.getFullYear()}\n      </Typography>\n      <TableContainer\n        component={Paper}\n        sx={{ maxWidth: \"300px\", margin: \"auto\" }}\n      >\n        <Table>\n          <TableHead>\n            <TableRow>\n              {[\"Dom\", \"Lun\", \"Mar\", \"Mié\", \"Jue\", \"Vie\", \"Sáb\"].map(\n                (day, index) => (\n                  <TableCell\n                    sx={{\n                      backgroundColor: \"#f2f2f2\",\n                      textAlign: \"center\",\n                      padding: \"2px\",\n                    }}\n                    key={day + hash}\n                  >\n                    {day}\n                  </TableCell>\n                )\n              )}\n            </TableRow>\n          </TableHead>\n          <TableBody>\n            {chunkArray(daysInMonth, 7).map((row, rowIndex) => (\n              <TableRow key={`${hash}-${rowIndex}`}>\n                {row.map((day, index) => getTableCel(day, rowIndex, index))}\n              </TableRow>\n            ))}\n          </TableBody>\n        </Table>\n      </TableContainer>\n    </div>\n  );\n};\n\n/**\n * Returns an array containing the days of the month, including any empty cells for days before the first day of the month.\n *\n * @param {Date} date - The date for which to retrieve the days of the month\n * @returns {number[]} An array containing the days of the month, starting with the first day of the month and including any empty cells for days before the first day of the month\n */\nconst getDaysInMonth = (date) => {\n  const firstDay = new Date(date.getFullYear(), date.getMonth(), 1);\n  const startingDayOfWeek = firstDay.getDay(); // 0 (Sunday) to 6 (Saturday)\n  const daysInMonth = [];\n\n  // Add empty cells for days before the first day of the month\n  for (let i = 0; i < startingDayOfWeek; i++) {\n    daysInMonth.push(null);\n  }\n\n  const lastDay = new Date(date.getFullYear(), date.getMonth() + 1, 0);\n\n  // Add the days of the month\n  for (let i = 1; i <= lastDay.getDate(); i++) {\n    daysInMonth.push(i);\n  }\n\n  return daysInMonth;\n};\n\n/**\n * The `chunkArray` function takes an array and a size as input and returns a new array with the\n * original array split into smaller arrays of the specified size.\n *\n * @param {Array} arr - The array to be split into smaller arrays\n * @param {number} size - The maximum length of each subarray\n * @returns {Array} The function `chunkArray` returns a new array that contains subarrays of the original array\n * `arr`, where each subarray has a maximum length of `size`.\n */\nconst chunkArray = (arr, size) => {\n  const chunkedArray = [];\n  for (let i = 0; i < arr.length; i += size) {\n    chunkedArray.push(arr.slice(i, i + size));\n  }\n  return chunkedArray;\n};\nexport default Calendar;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}