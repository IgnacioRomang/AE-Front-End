{"ast":null,"code":"var _jsxFileName = \"/home/ignacioromang/Projects/AE-Front-End/src/routes/news.jsx\",\n  _s = $RefreshSig$();\nimport axios from \"axios\";\nimport React from \"react\";\nimport PdfTable from \"../components/PDFtable\";\nimport ScrollableComponent from \"../fragments/ScrollableComponent\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function News() {\n  _s();\n  const [pdfs, setPdfs] = React.useState([]);\n  React.useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let url = process.env.REACT_APP_BACK_URL;\n        const response = await axios.post(url + \"/api/pdf/getpdflist\");\n        const sortedPdfs = response.data.sort((a, b) => a.id - b.id);\n        setPdfs(sortedPdfs);\n      } catch (error) {\n        console.error(\"Error fetching PDF:\", error);\n        // Handle error if needed\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  //TODO HACER EL LOADING\n  return /*#__PURE__*/_jsxDEV(PdfTable, {\n    pdfs: pdfs\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 26,\n    columnNumber: 10\n  }, this);\n}\n_s(News, \"9jyhUoPI0DViGumAEiObTG/hbcw=\");\n_c = News;\nvar _c;\n$RefreshReg$(_c, \"News\");","map":{"version":3,"names":["axios","React","PdfTable","ScrollableComponent","jsxDEV","_jsxDEV","News","_s","pdfs","setPdfs","useState","useEffect","fetchData","url","process","env","REACT_APP_BACK_URL","response","post","sortedPdfs","data","sort","a","b","id","error","console","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/ignacioromang/Projects/AE-Front-End/src/routes/news.jsx"],"sourcesContent":["import axios from \"axios\";\nimport React from \"react\";\nimport PdfTable from \"../components/PDFtable\";\nimport ScrollableComponent from \"../fragments/ScrollableComponent\";\n\nexport default function News() {\n  const [pdfs, setPdfs] = React.useState([]);\n\n  React.useEffect(() => {\n    const fetchData = async () => {\n      try {\n        let url = process.env.REACT_APP_BACK_URL;\n        const response = await axios.post(url + \"/api/pdf/getpdflist\");\n        const sortedPdfs = response.data.sort((a, b) => a.id - b.id);\n        setPdfs(sortedPdfs);\n      } catch (error) {\n        console.error(\"Error fetching PDF:\", error);\n        // Handle error if needed\n      }\n    };\n\n    fetchData();\n  }, []);\n\n  //TODO HACER EL LOADING\n  return <PdfTable pdfs={pdfs} />;\n}\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,OAAOC,mBAAmB,MAAM,kCAAkC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,eAAe,SAASC,IAAIA,CAAA,EAAG;EAAAC,EAAA;EAC7B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,KAAK,CAACS,QAAQ,CAAC,EAAE,CAAC;EAE1CT,KAAK,CAACU,SAAS,CAAC,MAAM;IACpB,MAAMC,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5B,IAAI;QACF,IAAIC,GAAG,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB;QACxC,MAAMC,QAAQ,GAAG,MAAMjB,KAAK,CAACkB,IAAI,CAACL,GAAG,GAAG,qBAAqB,CAAC;QAC9D,MAAMM,UAAU,GAAGF,QAAQ,CAACG,IAAI,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKD,CAAC,CAACE,EAAE,GAAGD,CAAC,CAACC,EAAE,CAAC;QAC5Df,OAAO,CAACU,UAAU,CAAC;MACrB,CAAC,CAAC,OAAOM,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C;MACF;IACF,CAAC;;IAEDb,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,oBAAOP,OAAA,CAACH,QAAQ;IAACM,IAAI,EAAEA;EAAK;IAAAmB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACjC;AAACvB,EAAA,CArBuBD,IAAI;AAAAyB,EAAA,GAAJzB,IAAI;AAAA,IAAAyB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}